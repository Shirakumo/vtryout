(in-package #:org.shirakumo.fraf.vtryout)

(define-shader-entity actor (basic-animation-controller)
  ((face-transform :initform (transform) :accessor face-transform)
   (face-packet :initform NIL :accessor face-packet)))

(defmethod shared-initialize :after ((actor actor) slots &key layers)
  (dolist (layer layers)
    (destructuring-bind (name &optional (strength 1.0)) (enlist layer)
      (add-animation-layer name actor :strength strength :if-exists :supersede))))

(defmethod fk-update ((actor actor) pose tt dt fc)
  (let ((skeleton (skeleton actor))
        (joints (joints pose))
        (packet (face-packet actor))
        (transform (face-transform actor)))
    (labels ((adjust-joint (name &key quat scale)
               (let* ((index (trial:node name skeleton))
                      (joint (aref joints index)))
                 (when quat (nq* (trotation joint) quat))
                 (when scale (nv* (tscaling joint) scale))))
             (adjust-joint/angles (name &key x y z)
               (let ((quat (quat)))
                 (when x (nq* quat (qfrom-angle +vx+ x)))
                 (when y (nq* quat (qfrom-angle +vy+ y)))
                 (when z (nq* quat (qfrom-angle +vz+ z)))
                 (adjust-joint name :quat quat))))
      (adjust-joint :ORG-SPINE.006 :quat (trotation transform))
      ;; (adjust-joint/angles :head.x :x -.5 :z -.5)
      (adjust-joint/angles :DEF-LID.-T.-L :x (- (packet-blink-left packet) 1.0))
      (adjust-joint/angles :DEF-LID.-T.-R :x (- (packet-blink-right packet) 1.0))
      )))

;; KLUDGE
(defmethod enter :after ((entity animated-entity) (controller animation-controller))
  (setf (animation-controller entity) controller))

(defmethod update :before ((actor actor) tt dt fc)
  (let* ((layer (animation-layer :mouth-open actor :if-does-not-exist :create))
         (seg (harmony:segment 'speech-detection T))
         (new ;; (if (speech-p seg)
              ;;     (* 1.5 (vz (main-frequency seg)))
              ;;     0.0)
           (packet-mouth-open (face-packet actor))))
    (setf (strength layer) (lpf 0.8 (strength layer) new))))

(define-handler (actor face-update) (local-transform packet)
  (t<- (face-transform actor) local-transform)
  (setf (face-packet actor) packet))

(defun actor (&optional name)
  (do-scene-graph (node (scene +main+))
    (when (and (typep node 'actor)
               (or (not name) (eql name (name node))))
      (return node))))

(defun toggle-layer (name &key (actor (actor)) (strength 1.0))
  (if (animation-layer name actor)
      (remove-animation-layer name actor)
      (add-animation-layer name actor :strength strength)))

(defun activate-camera (name &optional (scene (scene +main+)))
  (with-simple-restart (continue "Don't activate the camera")
    (do-scene-graph (node (node name scene) (error "No camera named ~s" name))
      (when (typep node 'camera)
        (activate node)
        (return)))))

(defun activate-next-camera (&optional (scene (scene +main+)))
  (let ((found NIL))
    (or (do-scene-graph (node scene)
          (when (typep node 'camera)
            (cond ((eq node (camera scene))
                   (setf found T))
                  (found
                   (return (activate node))))))
        (do-scene-graph (node scene)
          (when (typep node 'camera)
            (return (activate node)))))))

(defun activate-prev-camera (&optional (scene (scene +main+)))
  (let ((prev NIL))
    (or (do-scene-graph (node scene)
          (when (typep node 'camera)
            (cond ((and prev (eq node (camera scene)))
                   (return (activate prev)))
                  (T
                   (setf prev node)))))
        (when prev
          (activate prev)))))
